<?xml version="1.0" encoding="UTF-8"?>
<application name="ApplicationWOCAT" typeFlags="job-input">

  <components>

    <component name="HotFolderFeeder" subType="hotFolderFeeder" factoryName="aspire-filefeeder">
      <config>
        <feederLabel>CrawlFolder</feederLabel>
        <metadataMap>
          <map from="fileName" to="fileName"/>
          <map from="fullPath" to="fullPath"/>
        </metadataMap>
        <autoStart>false</autoStart>
        <loopWait>43200000</loopWait>
        <hotFolders>
          <hotFolder match=".*\.xml">
            <inputQueueFolder>datastore/wocat/input-queue</inputQueueFolder>
            <quarantineFolder>datastore/wocat/quarantine</quarantineFolder>
            <completedFolder>datastore/wocat/completed</completedFolder>
            <inProcessFolder>datastore/wocat/in-process</inProcessFolder>
          </hotFolder>
        </hotFolders>
        <branches>
          <branch event="onPublish" pipelineManager="ProcessWOCATData"/>
        </branches>
      </config>
    </component>
    
    
    <component name="ProcessWOCATData" subType="pipeline" factoryName="aspire-application">
      <queueSize>100</queueSize>
      <maxThreads>20</maxThreads>
      
      <components>

        <component name="Scheduler" subType="default" factoryName="aspire-scheduler">
          <schedules>
            <schedule name="UpdateSchedule" enabled="true" singleton="false">
              <cron>${schedule}</cron>
              <event>onPublish</event>
            </schedule>
          </schedules>
          <branches>
            <branch event="onPublish" pipelineManager="../ProcessWOCATData" pipeline="doc-process-xml"/>
          </branches>
        </component>


        <component name="SetFetchURL" subType="default" factoryName="aspire-groovy">
          <script>
            <![CDATA[
              // If pipeline is executed by the scheduler
              if (doc.fetchUrl == null || doc.fetchUrl.text().isEmpty()) {
                doc.fetchUrl = "https://www.wocat.net/index.php?id=231&no_cache=1";
                component.info("SetFetchURL: Processing https://www.wocat.net/index.php?id=231&no_cache=1");
              }
            ]]>
          </script>
        </component>


        <component name="FetchUrl" subType="default" factoryName="aspire-fetch-url"/>


        <component name="XMLSubJobExtract" subType="xmlSubJobExtractor" factoryName="aspire-xml-files">
          <config>
            <branches>
              <branch event="onSubJob" pipelineManager="../ProcessWOCATXML"/>
            </branches>
          </config>
        </component>


        <component name="WaitForSubJobs" subType="waitForSubJobs" factoryName="aspire-tools"/>

      </components>


      <pipelines>
        <pipeline name="doc-process-xml" default="true">
          <stages>
            <stage component="SetFetchURL"/>
            <stage component="FetchUrl"/>
            <stage component="XMLSubJobExtract"/>
            <stage component="WaitForSubJobs"/>
          </stages>
        </pipeline>
      </pipelines>
    </component>
    
    
    <component name="ProcessWOCATXML" subType="pipeline" factoryName="aspire-application">
      <queueSize>200</queueSize>
      <maxThreads>50</maxThreads>
      
      <components>                
        
        <component name="SetDocumentURL" subType="default" factoryName="aspire-groovy">
          <script>
            <![CDATA[
              import com.searchtechnologies.aspire.services.AspireObject;
              import com.searchtechnologies.aspire.services.Job;

              doc.action = "add";

              Node docXml = new groovy.util.XmlParser().parseText(doc.toXmlString());
              String id = docXml.field.find { it.@name == 'id' }.text();
              Node fetchUrl = docXml.field.find { it.@name == 'url' };
              
              if (fetchUrl != null && !fetchUrl.text().isEmpty()) {
                // URL with html are not included because they content invalid html content
                Map filterDocs = ["csv":"","doc":"","docx":"","pdf":"","pps":"","ppt":"","pptx":"","txt":""];
                String docExt = fetchUrl.text().toLowerCase().substring(fetchUrl.text().lastIndexOf(".")+1);

                if (filterDocs.containsKey(docExt)) {
                  HttpURLConnection urlConn = null;
                  try {
                    URL url = new URL(fetchUrl.text().trim());
                    if (url != null) {
                      urlConn = (HttpURLConnection) url.openConnection();

                      if (urlConn.getResponseCode() == 200) {
                        doc.fetchUrl = fetchUrl.text().trim();
                        Job subJob = job.createSubJob(doc, job.getJobId() + "-" + id);
                        bh.enqueue(subJob, "onSubJob");
                      }
                    }
                  } catch (MalformedURLException mue) {
                    component.error(mue.printStackTrace());
                  } finally {
                    if (urlConn != null) {
                      urlConn.disconnect();
                    }
                  }                
                } else {
                  component.warn("SetDocumentURL: " + fetchUrl.text() + " does not contain valid content, dropping document.");
                  job.terminate();
                }
              }
            ]]>
          </script>
          <branches>  
            <branch event="onSubJob" pipelineManager="../ProcessURL" />
          </branches>
        </component>

        
        <component name="WaitForSubJobs" subType="waitForSubJobs" factoryName="aspire-tools"/>


        <component name="NormaliseMimeType" subType="mimeTypeNormalizer" factoryName="aspire-tools">
          <config>
            <mimetypesLocation>config/normaliser/normalized-mimetypes.xml</mimetypesLocation>
          </config>
        </component>


        <component name="SetTaggerFields" subType="default" factoryName="aspire-groovy">
          <script>
            <![CDATA[
              // Set title field for Aspire tagger.
              
              def setTaggerField(docXml, fieldName) {
                def field = docXml.field.find { it.@name == fieldName };
                if (field != null && !field.text().isEmpty()) {
                  doc.add(fieldName, field.text());
                }
              }
              
              def docXml = new groovy.util.XmlParser().parseText(doc.toXmlString());
              setTaggerField(docXml, "title");
              setTaggerField(docXml, "abstract");
              setTaggerField(docXml, "description");
            ]]>
          </script>
        </component>
        
        
        <component name="KeywordsTagger" subType="default" factoryName="aspire-tag-text">
          <output>keywordsTags</output>
          <tagFields>
            <tagField field="title"/>
            <tagField field="abstract"/>
            <tagField field="description"/>
            <tagField field="content"/>
            <tagField field="citation"/>
            <tagField field="keywords"/>
          </tagFields>
          <tagLists>
            <tagList id="agrovoc_keywords_unccd" tagFile="config/tagger/agrovoc_keywords_unccd.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
            <tokenFilter class="org.apache.lucene.analysis.LowerCaseFilter"/>
          </tokenProcessing>
        </component>
        

        <component name="KeywordsTaggerCaseSensitive" subType="default" factoryName="aspire-tag-text">
          <output>keywordsTags</output>
          <tagFields>
            <tagField field="title"/>
            <tagField field="abstract"/>
            <tagField field="description"/>
            <tagField field="content"/>
            <tagField field="citation"/>
            <tagField field="keywords"/>
          </tagFields>
          <tagLists>
            <tagList id="agrovoc_keywords_unccd" tagFile="config/tagger/agrovoc_keywords_unccd_case_sensitive.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>


        <component name="DocumentTypesTagger" subType="default" factoryName="aspire-tag-text">
          <output>documentTypesTags</output>
          <tagFields>
            <tagField field="title"/>
          </tagFields>
          <tagLists>
            <tagList id="document_types" tagFile="config/tagger/document_types.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
            <tokenFilter class="org.apache.lucene.analysis.LowerCaseFilter"/>
          </tokenProcessing>
        </component> 
        
        
        <component name="RegionsTagger" subType="default" factoryName="aspire-tag-text">
          <output>regionsTags</output>
          <tagFields>
            <tagField field="title"/>
            <tagField field="abstract"/>
            <tagField field="description"/>
            <tagField field="content"/>
            <tagField field="citation"/>
            <tagField field="keywords"/>            
          </tagFields>
          <tagLists>
            <tagList id="regions" tagFile="config/tagger/regions.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>
        
        
        <component name="AnnexesTagger" subType="default" factoryName="aspire-tag-text">
          <output>annexesTags</output>
          <tagFields>
            <tagField field="title"/>
            <tagField field="abstract"/>
            <tagField field="description"/>
            <tagField field="content"/>
            <tagField field="citation"/>
            <tagField field="keywords"/>
          </tagFields>
          <tagLists>
            <tagList id="annexes" tagFile="config/tagger/annexes.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>
        
        
        <component name="NonAnnexesTagger" subType="default" factoryName="aspire-tag-text">
          <output>nonAnnexesTags</output>
          <tagFields>
            <tagField field="title"/>
            <tagField field="abstract"/>
            <tagField field="description"/>
            <tagField field="content"/>
            <tagField field="citation"/>
            <tagField field="keywords"/>
          </tagFields>
          <tagLists>
            <tagList id="nonAnnexes" tagFile="config/tagger/non_annexes.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>
        

        <component name="LandManagementTagger" subType="default" factoryName="aspire-tag-text">
          <output>landManagementTags</output>
          <tagFields>
            <tagField field="title"/>
            <tagField field="abstract"/>
            <tagField field="description"/>
            <tagField field="content"/>
            <tagField field="citation"/>
            <tagField field="keywords"/>
          </tagFields>
          <tagLists>
            <tagList id="landManagement" tagFile="config/tagger/land_management.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
            <tokenFilter class="org.apache.lucene.analysis.LowerCaseFilter"/>
          </tokenProcessing>
        </component>
        

        <component name="ClimateZonesTagger" subType="default" factoryName="aspire-tag-text">
          <output>climateZonesTags</output>
          <tagFields>
            <tagField field="title"/>
            <tagField field="abstract"/>
            <tagField field="description"/>
            <tagField field="content"/>
            <tagField field="citation"/>
            <tagField field="keywords"/>
          </tagFields>
          <tagLists>
            <tagList id="climateZones" tagFile="config/tagger/climate_zones.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>


        <component name="Router" subType="router" factoryName="aspire-tools">
          <routeTable>
            <route component="/BusinessRulesEngine"/>
            <route component="/PublishToSolr"/>
          </routeTable>
        </component>
        
      </components>


      <pipelines>
        <pipeline name="default-pipeline" default="true">
          <stages>
            <stage component="SetDocumentURL"/>
            <stage component="WaitForSubJobs"/>
            <stage component="NormaliseMimeType"/>
            <stage component="SetTaggerFields"/>
            <stage component="KeywordsTagger"/>
            <stage component="KeywordsTaggerCaseSensitive"/>
            <stage component="DocumentTypesTagger"/>
            <stage component="RegionsTagger"/>
            <stage component="AnnexesTagger"/>
            <stage component="NonAnnexesTagger"/>
            <stage component="LandManagementTagger"/>
            <stage component="ClimateZonesTagger"/>
            <stage component="Router"/>
          </stages>
        </pipeline>
      </pipelines>
    </component>
  
 
    <!-- Extract content of document -->

    <component name="ProcessURL" subType="pipeline" factoryName="aspire-application">
      <queueSize>200</queueSize>
      <maxThreads>50</maxThreads>
      
      <components>
      
        <component name="FetchUrl" subType="default" factoryName="aspire-fetch-url"/>

        <component name="ExtractText" subType="default" factoryName="aspire-extract-text">
          <maxCharacters>20000000</maxCharacters>  // 20MB max size
          <extractTimeout>600000</extractTimeout>  // 10 minutes timeout
        </component>
        
      </components>

      <pipelines>
        <pipeline name="default-pipeline" default="true">
          <stages>
            <stage component="FetchUrl"/>
            <stage component="ExtractText"/>
          </stages>
        </pipeline>
      </pipelines>
    </component>
  </components>
</application>