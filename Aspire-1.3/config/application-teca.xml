<?xml version="1.0" encoding="UTF-8"?>
<application name="ApplicationTECA" typeFlags="job-input">

  <components>

    <component name="HotFolderFeeder" subType="hotFolderFeeder" factoryName="aspire-filefeeder">
      <config>
        <feederLabel>CrawlFolder</feederLabel>
        <metadataMap>
          <map from="fileName" to="fileName"/>
          <map from="fullPath" to="fullPath"/>
        </metadataMap>
        <autoStart>false</autoStart>
        <loopWait>43200000</loopWait>
        <hotFolders>
          <hotFolder match=".*\.xml">
            <inputQueueFolder>datastore/teca/input-queue</inputQueueFolder>
            <quarantineFolder>datastore/teca/quarantine</quarantineFolder>
            <completedFolder>datastore/teca/completed</completedFolder>
            <inProcessFolder>datastore/teca/in-process</inProcessFolder>
          </hotFolder>
        </hotFolders>
        <branches>
          <branch event="onPublish" pipelineManager="ProcessTECAData"/>
        </branches>
      </config>
    </component>
    
    <!-- Process TECA data: Single XML with all documents -->
    
    <component name="ProcessTECAData" subType="pipeline" factoryName="aspire-application">
      <gatherStatistics>true</gatherStatistics>
      <queueSize>200</queueSize>
      <maxThreads>50</maxThreads>
      
      <components>

        <component name="Scheduler" subType="default" factoryName="aspire-scheduler">
          <schedules>
            <schedule name="UpdateSchedule" enabled="true" singleton="false">
              <cron>0 0 0 ? * 2</cron>
              <event>onPublish</event>
            </schedule>
          </schedules>
          <branches>
            <branch event="onPublish" pipelineManager="../ProcessTECAData" pipeline="doc-process-data"/>
          </branches>
        </component>


        <component name="SetFetchURL" subType="default" factoryName="aspire-groovy">
          <script>
            <![CDATA[
              // If pipeline is executed by the scheduler
              if (doc.fetchUrl == null || doc.fetchUrl.text().isEmpty()) {
                doc.fetchUrl = "http://teca.fao.org/search/technologies/xml";
                component.info("SetFetchURL: Processing http://teca.fao.org/search/technologies/xml");
              }
            ]]>
          </script>
        </component>


        <component name="CacheXML" subType="default" factoryName="aspire-groovy">
          <variable name="LOAD_VARIABLES" component="/initialize/initPipeline/loadVariables"/>
          
          <script>
            <![CDATA[
              import java.util.regex.Pattern;

              if (doc.fetchUrl != null && doc.fetchUrl.text().startsWith("http://")) {
                // Cache original XML for offline feeding.
                Pattern xmlPrettyPrint = LOAD_VARIABLES.getVariable("XML_PRETTY_PRINT");              
                HttpURLConnection urlConn = null;
                
                component.info("SetFetchURL: Caching " + doc.fetchUrl.text());
                
                try {
                  URL url = new URL(doc.fetchUrl.text());
                  if (url != null) {
                    urlConn = (HttpURLConnection) url.openConnection();

                    if (urlConn.getResponseCode() == 200) {
                      BufferedReader bufferReader = null;
                      BufferedWriter bufferedWriter = null;                          

                      try {
                        InputStreamReader inputStreamReader = new InputStreamReader(urlConn.getInputStream(), "UTF8");

                        if (inputStreamReader != null) {
                          StringBuffer content = new StringBuffer();
                          bufferReader = new BufferedReader(inputStreamReader);

                          String line;
                          while ((line = bufferReader.readLine()) != null) {
                            content.append(line);
                            content.append(System.getProperty("line.separator"));
                          }

                          String xmlCachePath = "datastore/content-cache/teca";
                          if (xmlCachePath != null && !xmlCachePath.isEmpty()) {
                            File outputFileDir = new File(xmlCachePath);

                            if ((!outputFileDir.exists() && outputFileDir.mkdirs()) || outputFileDir.exists()) {
                              String outputFilename = xmlCachePath + File.separator + "teca-all.xml";
                              bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFilename, false), "UTF8"));
                              bufferedWriter.append(content.replaceAll(xmlPrettyPrint, ">\n<"));
                            } else {
                              component.error("SetFetchURL: Cannot create XML cache directory " + xmlCachePath);
                            }
                          }                                
                        }                          
                      } catch (IOException ioe) {
                        component.error(ioe.printStackTrace());
                      } finally {
                        if (bufferReader != null) {
                          try {
                            bufferReader.close();
                          } catch (IOException ioe) {
                            component.error(ioe.printStackTrace());
                          }
                        }
                        if (bufferedWriter != null) {
                          try {
                            bufferedWriter.close();
                          } catch (IOException ioe) {
                            component.error(ioe.printStackTrace());
                          }
                        }
                      }
                    } else {
                      component.error("CacheXML: Aborting XML processing, HTTP Code: " + urlConn.getResponseCode() + " for URL " + doc.fetchUrl.text());
                      job.terminate();
                    }
                  }
                } catch (MalformedURLException mue) {
                  component.error(mue.printStackTrace());
                } finally {
                  if (urlConn != null) {
                    urlConn.disconnect();
                  }
                }
              }
            ]]>
          </script>
        </component>
        

        <component name="FetchUrl" subType="default" factoryName="aspire-fetch-url"/>


        <component name="XMLSubJobExtract" subType="xmlSubJobExtractor" factoryName="aspire-xml-files">
          <config>
            <branches>
              <branch event="onSubJob" pipelineManager="../ProcessTECAXML"/>
            </branches>
          </config>
        </component>


        <component name="WaitForSubJobs" subType="waitForSubJobs" factoryName="aspire-tools"/>

      </components>


      <pipelines>
        <pipeline name="doc-process-data" default="true">
          <stages>
            <stage component="SetFetchURL"/>
            <stage component="CacheXML"/>
            <stage component="FetchUrl"/>
            <stage component="XMLSubJobExtract"/>
            <stage component="WaitForSubJobs"/>
          </stages>
        </pipeline>
      </pipelines>
    </component>
    
    
    <!-- Process each document extracted from single XML -->
    
    <component name="ProcessTECAXML" subType="pipeline" factoryName="aspire-application">
      <queueSize>200</queueSize>
      <maxThreads>50</maxThreads>

      <components>
        
        <component name="ProcessAttachments" subType="default" factoryName="aspire-groovy">
          <script>
            <![CDATA[
              import com.searchtechnologies.aspire.services.AspireObject;
              import com.searchtechnologies.aspire.services.Job;
              import java.util.concurrent.ConcurrentHashMap;
              
              if (doc.attached_files != null && doc.attached_files.text() != null && !doc.attached_files.text().isEmpty()) {
                Map<String, String> attachments = new ConcurrentHashMap<String, String>();
                job.attachments = attachments;
                
                int subJobId = 1;
                String[] urls = doc.attached_files.text().trim().split(",");
                
                for (String attachmentUrl : urls) {
                  HttpURLConnection urlConn = null;
                  try {
                    URL url = new URL(attachmentUrl.trim());
                    if (url != null) {
                      urlConn = (HttpURLConnection) url.openConnection();

                      if (urlConn.getResponseCode() == 200) {
                        AspireObject subDoc = new AspireObject("doc");
                        subDoc.fetchUrl = attachmentUrl.trim();
                        
                        Job subJob = job.createSubJob(subDoc, job.getJobId() + "-" + subJobId);
                        bh.enqueue(subJob, "onSubJob");
                        subJobId++;                
                      }
                    }
                  } catch (MalformedURLException mue) {
                    component.error(mue.printStackTrace());
                  } finally {
                    if (urlConn != null) {
                      urlConn.disconnect();
                    }
                  }
                }
              }
            ]]>
          </script>
          <branches>  
            <branch event="onSubJob" pipelineManager="../ProcessAttachment" />
          </branches>
        </component>

        
        <component name="WaitForSubJobs" subType="waitForSubJobs" factoryName="aspire-tools"/>


        <component name="SetAttachments" subType="default" factoryName="aspire-groovy">
          <script>
            <![CDATA[
              if (job.attachments != null) {
                String content = "";
                for (String url : job.attachments.keySet()) {
                  content += job.attachments.get(url) + System.getProperty("line.separator");
                }
                doc.content = content;
                job.attachments.clear();
              }
              
              // XML files have URL to HTML version
              doc.mimeType = "text/html";
            ]]>
          </script>
        </component>

        
        <component name="NormaliseMimeType" subType="mimeTypeNormalizer" factoryName="aspire-tools">
          <config>
            <mimetypesLocation>config/normaliser/normalized-mimetypes.xml</mimetypesLocation>
          </config>
        </component>        
        
        
        <component name="KeywordsTagger" subType="default" factoryName="aspire-tag-text">
          <output>keywordsTags</output>
          <tagFields>
            <tagField field="title"/>
            <tagField field="summary"/>
            <tagField field="description"/>
            <tagField field="content"/>
            <tagField field="categories"/>
            <tagField field="keywords"/>
            <tagField field="countries"/>
            <tagField field="regions"/>
          </tagFields>
          <tagLists>
            <tagList id="agrovoc_keywords_unccd" tagFile="config/tagger/agrovoc_keywords_unccd.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>


        <component name="DocumentTypesTagger" subType="default" factoryName="aspire-tag-text">
          <output>documentTypesTags</output>
          <tagFields>
            <tagField field="title"/>
          </tagFields>
          <tagLists>
            <tagList id="document_types" tagFile="config/tagger/document_types.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component> 
        
        
        <component name="RegionsTagger" subType="default" factoryName="aspire-tag-text">
          <output>regionsTags</output>
          <tagFields>
            <tagField field="title"/>
            <tagField field="summary"/>
            <tagField field="description"/>
            <tagField field="content"/>
            <tagField field="categories"/>
            <tagField field="keywords"/>
            <tagField field="countries"/>
            <tagField field="regions"/>
          </tagFields>
          <tagLists>
            <tagList id="regions" tagFile="config/tagger/regions.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>
        
        
        <component name="AnnexesTagger" subType="default" factoryName="aspire-tag-text">
          <output>annexesTags</output>
          <tagFields>
            <tagField field="title"/>
            <tagField field="summary"/>
            <tagField field="description"/>
            <tagField field="content"/>
            <tagField field="categories"/>
            <tagField field="keywords"/>
            <tagField field="countries"/>
            <tagField field="regions"/>
          </tagFields>
          <tagLists>
            <tagList id="annexes" tagFile="config/tagger/annexes.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>


        <component name="NonAnnexesTagger" subType="default" factoryName="aspire-tag-text">
          <output>nonAnnexesTags</output>
          <tagFields>
            <tagField field="title"/>
            <tagField field="summary"/>
            <tagField field="description"/>
            <tagField field="content"/>
            <tagField field="categories"/>
            <tagField field="keywords"/>
            <tagField field="countries"/>
            <tagField field="regions"/>
          </tagFields>
          <tagLists>
            <tagList id="nonAnnexes" tagFile="config/tagger/non_annexes.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>
        

        <component name="LandManagementTagger" subType="default" factoryName="aspire-tag-text">
          <output>landManagementTags</output>
          <tagFields>
            <tagField field="title"/>
            <tagField field="summary"/>
            <tagField field="description"/>
            <tagField field="content"/>
            <tagField field="categories"/>
            <tagField field="keywords"/>
            <tagField field="countries"/>
            <tagField field="regions"/>
          </tagFields>
          <tagLists>
            <tagList id="landManagement" tagFile="config/tagger/land_management.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>
        

        <component name="ClimateZonesTagger" subType="default" factoryName="aspire-tag-text">
          <output>climateZonesTaggerTags</output>
          <tagFields>
            <tagField field="title"/>
            <tagField field="summary"/>
            <tagField field="description"/>
            <tagField field="content"/>
            <tagField field="categories"/>
            <tagField field="keywords"/>
            <tagField field="countries"/>
            <tagField field="regions"/>
          </tagFields>
          <tagLists>
            <tagList id="climateZones" tagFile="config/tagger/climate_zones.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>
        
        
        <component name="ProcessedJobLogger" subType="jobLogger" factoryName="aspire-tools">
          <logFile>log/${app.name}/processed.jobs</logFile>
        </component>
        
        
        <component name="Router" subType="router" factoryName="aspire-tools">
          <routeTable>
            <route component="/BusinessRulesEngine"/>
            <route component="/PublishToSolr"/>
          </routeTable>
        </component>

      </components>
      
      <pipelines>
        <pipeline name="doc-process-xml" default="true">
          <stages>
            <stage component="ProcessAttachments"/>
            <stage component="WaitForSubJobs"/>
            <stage component="SetAttachments"/>
            <stage component="NormaliseMimeType"/>
            <stage component="KeywordsTagger"/>
            <stage component="DocumentTypesTagger"/>
            <stage component="RegionsTagger"/>
            <stage component="AnnexesTagger"/>
            <stage component="NonAnnexesTagger"/>
            <stage component="LandManagementTagger"/>
            <stage component="ClimateZonesTagger"/>
            <!-- stage component="ProcessedJobLogger"/ -->
            <stage component="Router"/>
          </stages>
        </pipeline>
      </pipelines>
    </component>


    <!-- Extract content of attachments of each document -->

    <component name="ProcessAttachment" subType="pipeline" factoryName="aspire-application">
      <queueSize>200</queueSize>
      <maxThreads>50</maxThreads>

      <components>
      
        <component name="FetchUrl" subType="default" factoryName="aspire-fetch-url"/>
        
        
        <component name="ExtractText" subType="default" factoryName="aspire-extract-text">
          <maxCharacters>20000000</maxCharacters>  // 20MB max size
          <extractTimeout>600000</extractTimeout>  // 10 minutes timeout
        </component>
        
        
        <component name="SetAttachement" subType="default" factoryName="aspire-groovy">
          <script>
            <![CDATA[
              if (job.get().fetchUrl != null && job.get().content != null) {
                job.getParentJob().attachments.put(job.get().fetchUrl.text(), job.get().content.text());
              }
            ]]>
          </script>
        </component>
        
      </components>

      <pipelines>
        <pipeline name="doc-process-attament" default="true">
          <stages>
            <stage component="FetchUrl"/>
            <stage component="ExtractText"/>
            <stage component="SetAttachement"/>
          </stages>
        </pipeline>
      </pipelines>
    </component>
  </components>
</application>