<?xml version="1.0" encoding="UTF-8"?>
<application name="ApplicationCSIC" typeFlags="job-input">

  <components>

    <component name="HotFolderFeeder" subType="hotFolderFeeder" factoryName="aspire-filefeeder">
      <config>
        <feederLabel>CrawlFolder</feederLabel>
        <metadataMap>
          <map from="fileName" to="fileName"/>
          <map from="fullPath" to="fullPath"/>
        </metadataMap>
        <autoStart>false</autoStart>
        <loopWait>43200000</loopWait>
        <hotFolders>
          <hotFolder match=".*\.xml">
            <inputQueueFolder>datastore/csic/input-queue</inputQueueFolder>
            <quarantineFolder>datastore/csic/quarantine</quarantineFolder>
            <completedFolder>datastore/csic/completed</completedFolder>
            <inProcessFolder>datastore/csic/in-process</inProcessFolder>
          </hotFolder>
        </hotFolders>
        <branches>
          <branch event="onPublish" pipelineManager="ProcessCSICXML"/>
        </branches>
      </config>
    </component>
    
    
    <component name="ProcessCSICData" subType="pipeline" factoryName="aspire-application">
      <queueSize>200</queueSize>
      <maxThreads>50</maxThreads>
      
      <components>

        <component name="Scheduler" subType="default" factoryName="aspire-scheduler">
          <schedules>
            <schedule name="CrawlSchedule" enabled="true" singleton="false">
              <cron>${schedule}</cron>
              <event>onPublish</event>
            </schedule>
          </schedules>
          <branches>
            <branch event="onPublish" pipelineManager="../ProcessCSICData" pipeline="doc-process-xml"/>
          </branches>
        </component>


        <component name="SetFetchURL" subType="default" factoryName="aspire-groovy">
          <variable name="LOAD_VARIABLES" component="/initialize/initPipeline/loadVariables"/>
          
          <script>
            <![CDATA[
              import com.searchtechnologies.aspire.services.AspireObject;
              import com.searchtechnologies.aspire.services.Job;
              import java.util.regex.Pattern;
        
              if (doc.fetchUrl == null || doc.fetchUrl.text().isEmpty()) {
                Pattern xmlPrettyPrint = LOAD_VARIABLES.getVariable("XML_PRETTY_PRINT");

                component.info("SetFetchURL: Processing http://digital.csic.es/dspace-oai/request?verb=GetRecord&metadataPrefix=oai_dc&identifier=oai:digital.csic.es:10261/");

                // Iterates IDs looking for valid URL
                for (int i=1300; i<=95000; i++) {              
                  String csicUrl = "http://digital.csic.es/dspace-oai/request?verb=GetRecord&metadataPrefix=oai_dc&identifier=oai:digital.csic.es:10261/" + i;

                  HttpURLConnection urlConn = null;
                  try {
                    URL url = new URL(csicUrl);
                    if (url != null) {
                      urlConn = (HttpURLConnection) url.openConnection();

                      if (urlConn.getResponseCode() == 200) {
                        BufferedReader bufferReader = null;
                        BufferedWriter bufferedWriter = null;                          

                        try {
                          InputStreamReader inputStreamReader = new InputStreamReader(urlConn.getInputStream(), "UTF8");

                          if (inputStreamReader != null) {
                            StringBuffer content = new StringBuffer();
                            bufferReader = new BufferedReader(inputStreamReader);
                            
                            String line;
                            while ((line = bufferReader.readLine()) != null) {
                              content.append(line);
                              content.append(System.getProperty("line.separator"));
                            }

                            if (!content.toString().contains("idDoesNotExist") && !content.toString().contains("<header status=\"deleted\">")) {
                              // Set FetchUrl

                              AspireObject subDoc = new AspireObject("doc");
                              subDoc.fetchUrl = csicUrl;
                              Job subJob = job.createSubJob(subDoc, job.getJobId() + "-" + i);
                              bh.enqueue(subJob, "onSubJob");
                              component.info("Processing: " + csicUrl);
                            
                              // Write XML to disk cache 
                              
                              String xmlCachePath = "datastore/content-cache/csic";
                              if (xmlCachePath != null && !xmlCachePath.isEmpty()) {
                                File outputFileDir = new File(xmlCachePath);

                                if ((!outputFileDir.exists() && outputFileDir.mkdirs()) || outputFileDir.exists()) {
                                  String outputFilename = xmlCachePath + File.separator + i + "_CSIC.xml";
                                  bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFilename, false), "UTF8"));
                                  bufferedWriter.append(content.replaceAll(xmlPrettyPrint, ">\n<"));
                                } else {
                                  component.error("SetFetchURL: Cannot create XML cache directory " + xmlCachePath);
                                }
                              } else {
                                component.error("SetFetchURL: Missing application property xmlCachePath");
                              }                                
                            } else {
                              component.error("SetFetchURL: Invalid XML file: " + csicUrl);
                            }
                          }                          
                        } catch (IOException ioe) {
                          component.error(ioe.printStackTrace());
                        } finally {
                          if (bufferReader != null) {
                            try {
                              bufferReader.close();
                            } catch (IOException ioe) {
                              component.error(ioe.printStackTrace());
                            }
                          }
                          if (bufferedWriter != null) {
                            try {
                              bufferedWriter.close();
                            } catch (IOException ioe) {
                              component.error(ioe.printStackTrace());
                            }
                          }
                        }
                      }       
                    }
                  } catch (MalformedURLException mue) {
                    component.error(mue.printStackTrace());
                  } finally {
                    if (urlConn != null) {
                      urlConn.disconnect();
                    }
                  }
                }
              }
            ]]>
          </script>
          <branches>  
            <branch event="onSubJob" pipelineManager="../ProcessCSICXML" />
          </branches>
        </component>
        
        
        <component name="WaitForSubJobs" subType="waitForSubJobs" factoryName="aspire-tools"/>

      </components>


      <pipelines>
        <pipeline name="doc-process-xml" default="true">
          <stages>
            <stage component="SetFetchURL"/>
            <stage component="WaitForSubJobs"/>
          </stages>
        </pipeline>
      </pipelines>
    </component>
    
    
    <component name="ProcessCSICXML" subType="pipeline" factoryName="aspire-application">
      <queueSize>200</queueSize>
      <maxThreads>50</maxThreads>
      
      <components>                        
        
        <component name="FetchUrl" subType="default" factoryName="aspire-fetch-url"/>
        
        
        <component name="LoadXML" subType="loadXML" factoryName="aspire-xml-files"/>


        <component name="SetMimeNormaliserField" subType="default" factoryName="aspire-groovy">
          <script>
            <![CDATA[
              import com.searchtechnologies.aspire.services.AspireObject;
              
              // Get mime type from XML
              doc.mimeType = "text/html";
              if (doc.'OAI-PMH'.GetRecord.record.metadata != null) {
                List<AspireObject> formatList = doc.'OAI-PMH'.GetRecord.record.metadata.'oai_dc:dc'.getAll("dc:format");
                for (AspireObject format : formatList) {
                  if (format != null && format.text() != null && !format.text().isEmpty() && format.text().contains("/")) {
                    doc.mimeType = format.text();
                    break;
                  }
                }
              } 
            ]]>
          </script>
        </component>
        
        
        <component name="NormaliseMimeType" subType="mimeTypeNormalizer" factoryName="aspire-tools">
          <config>
            <mimetypesLocation>config/normaliser/normalized-mimetypes.xml</mimetypesLocation>
          </config>
        </component>
        
        
        <component name="SetTaggerFields" subType="default" factoryName="aspire-groovy">
          <script>
            <![CDATA[
              import com.searchtechnologies.aspire.services.AspireObject;
              
              def setTaggerField(fieldName, taggerFieldName) {
                String fieldValues = "";
                if (doc.'OAI-PMH'.GetRecord.record.metadata != null) {
                  List<AspireObject> nodes = doc.'OAI-PMH'.GetRecord.record.metadata.'oai_dc:dc'.getAll(fieldName);
                  for (AspireObject node : nodes) {
                    if (node != null && node.text() != null && !node.text().isEmpty()) {
                      fieldValues += node.text() + " ";
                    }
                  }
                }
                
                if (fieldValues != null && !fieldValues.trim().isEmpty()) {
                  doc.add(taggerFieldName, fieldValues.trim());
                }
              }

              setTaggerField("dc:title", "titlesTagger");
              setTaggerField("dc:description", "descriptionsTagger");  // Description field also contains the abstract
              setTaggerField("dc:subject", "subjectsTagger");                            
            ]]>
          </script>
        </component>
        
        
        <component name="KeywordsTagger" subType="default" factoryName="aspire-tag-text">
          <output>keywordsTags</output>
          <tagFields>
            <tagField field="titlesTagger"/>
            <tagField field="descriptionsTagger"/>
            <tagField field="subjectsTagger"/>
          </tagFields>
          <tagLists>
            <tagList id="agrovoc_keywords_unccd" tagFile="config/tagger/agrovoc_keywords_unccd.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
            <tokenFilter class="org.apache.lucene.analysis.LowerCaseFilter"/>
          </tokenProcessing>
        </component>


        <component name="KeywordsTaggerCaseSensitive" subType="default" factoryName="aspire-tag-text">
          <output>keywordsTags</output>
          <tagFields>
            <tagField field="titlesTagger"/>
            <tagField field="descriptionsTagger"/>
            <tagField field="subjectsTagger"/>
          </tagFields>
          <tagLists>
            <tagList id="agrovoc_keywords_unccd" tagFile="config/tagger/agrovoc_keywords_unccd_case_sensitive.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>


        <component name="DocumentTypesTagger" subType="default" factoryName="aspire-tag-text">
          <output>documentTypesTags</output>
          <tagFields>
            <tagField field="titlesTagger"/>
          </tagFields>
          <tagLists>
            <tagList id="document_types" tagFile="config/tagger/document_types.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
            <tokenFilter class="org.apache.lucene.analysis.LowerCaseFilter"/>
          </tokenProcessing>
        </component>  

        
        <component name="RegionsTagger" subType="default" factoryName="aspire-tag-text">
          <output>regionsTags</output>
          <tagFields>
            <tagField field="titlesTagger"/>
            <tagField field="descriptionsTagger"/>
            <tagField field="subjectsTagger"/>
          </tagFields>
          <tagLists>
            <tagList id="regions" tagFile="config/tagger/regions.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>
        
        
        <component name="AnnexesTagger" subType="default" factoryName="aspire-tag-text">
          <output>annexesTags</output>
          <tagFields>
            <tagField field="titlesTagger"/>
            <tagField field="descriptionsTagger"/>
            <tagField field="subjectsTagger"/>
          </tagFields>
          <tagLists>
            <tagList id="annexes" tagFile="config/tagger/annexes.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>
        

        <component name="NonAnnexesTagger" subType="default" factoryName="aspire-tag-text">
          <output>nonAnnexesTags</output>
          <tagFields>
            <tagField field="titlesTagger"/>
            <tagField field="descriptionsTagger"/>
            <tagField field="subjectsTagger"/>
          </tagFields>
          <tagLists>
            <tagList id="nonAnnexes" tagFile="config/tagger/non_annexes.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>
        
        
        <component name="LandManagementTagger" subType="default" factoryName="aspire-tag-text">
          <output>landManagementTags</output>
          <tagFields>
            <tagField field="titlesTagger"/>
            <tagField field="descriptionsTagger"/>
            <tagField field="subjectsTagger"/>
          </tagFields>
          <tagLists>
            <tagList id="landManagement" tagFile="config/tagger/land_management.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
            <tokenFilter class="org.apache.lucene.analysis.LowerCaseFilter"/>
          </tokenProcessing>
        </component>
        

        <component name="ClimateZonesTagger" subType="default" factoryName="aspire-tag-text">
          <output>climateZonesTags</output>
          <tagFields>
            <tagField field="titlesTagger"/>
            <tagField field="descriptionsTagger"/>
            <tagField field="subjectsTagger"/>
          </tagFields>
          <tagLists>
            <tagList id="climateZones" tagFile="config/tagger/climate_zones.txt"/>
          </tagLists>
          <tokenProcessing>
            <tokenFilter class="org.apache.lucene.analysis.standard.StandardFilter"/>
          </tokenProcessing>
        </component>
        

        <component name="Router" subType="router" factoryName="aspire-tools">
          <routeTable>
            <route component="/BusinessRulesEngine"/>
            <route component="/PublishToSolr"/>
          </routeTable>
        </component>
       
      </components>


      <pipelines>
        <pipeline name="default-pipeline" default="true">
          <stages>
            <stage component="FetchUrl"/>
            <stage component="LoadXML"/>
            <stage component="SetMimeNormaliserField"/>
            <stage component="NormaliseMimeType"/>
            <stage component="SetTaggerFields"/>
            <stage component="KeywordsTagger"/>
            <stage component="KeywordsTaggerCaseSensitive"/>
            <stage component="DocumentTypesTagger"/>
            <stage component="RegionsTagger"/>
            <stage component="AnnexesTagger"/>
            <stage component="NonAnnexesTagger"/>
            <stage component="LandManagementTagger"/>
            <stage component="ClimateZonesTagger"/>
            <stage component="Router"/>
          </stages>
        </pipeline>
      </pipelines>
    </component>
  </components>
</application>